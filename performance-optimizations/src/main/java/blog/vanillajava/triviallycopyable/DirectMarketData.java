package blog.vanillajava.triviallycopyable;

import net.openhft.chronicle.bytes.Bytes;
import net.openhft.chronicle.bytes.BytesIn;
import net.openhft.chronicle.bytes.BytesOut;
import net.openhft.chronicle.bytes.BytesStore;

public final class DirectMarketData extends MarketData {

    @Override
    public void readMarshallable(BytesIn bytes) {
        BytesStore<?, ?> bs = ((Bytes<?>) bytes).bytesStore();
        long position = bytes.readPosition();
        // generated by GitHub Copilot
        bytes.readSkip(112);
        securityId = bs.readLong(position+0);
        time = bs.readLong(position+8);
        bidQty0 = bs.readInt(position+16);
        bidQty1 = bs.readInt(position+20);
        bidQty2 = bs.readInt(position+24);
        bidQty3 = bs.readInt(position+28);
        askQty0 = bs.readInt(position+32);
        askQty1 = bs.readInt(position+36);
        askQty2 = bs.readInt(position+40);
        askQty3 = bs.readInt(position+44);
        bidPrice0 = bs.readDouble(position+48);
        bidPrice1 = bs.readDouble(position+56);
        bidPrice2 = bs.readDouble(position+64);
        bidPrice3 = bs.readDouble(position+72);
        askPrice0 = bs.readDouble(position+80);
        askPrice1 = bs.readDouble(position+88);
        askPrice2 = bs.readDouble(position+96);
        askPrice3 = bs.readDouble(position+104);
    }

    @Override
    public void writeMarshallable(BytesOut bytes) {
        BytesStore<?, ?> bs = ((Bytes<?>) bytes).bytesStore();
        long position = bytes.writePosition();

        // generated by GitHub Copilot
        bytes.writeSkip(112);
        bs.writeLong(position+0, securityId);
        bs.writeLong(position+8, time);
        bs.writeInt(position+16, bidQty0);
        bs.writeInt(position+20, bidQty1);
        bs.writeInt(position+24, bidQty2);
        bs.writeInt(position+28, bidQty3);
        bs.writeInt(position+32, askQty0);
        bs.writeInt(position+36, askQty1);
        bs.writeInt(position+40, askQty2);
        bs.writeInt(position+44, askQty3);
        bs.writeDouble(position+48, bidPrice0);
        bs.writeDouble(position+56, bidPrice1);
        bs.writeDouble(position+64, bidPrice2);
        bs.writeDouble(position+72, bidPrice3);
        bs.writeDouble(position+80, askPrice0);
        bs.writeDouble(position+88, askPrice1);
        bs.writeDouble(position+96, askPrice2);
        bs.writeDouble(position+104, askPrice3);
    }

    @Override
    public boolean usesSelfDescribingMessage() {
        return false;
    }
}